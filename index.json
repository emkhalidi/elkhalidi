[{"content":"","date":"19 March 2024","permalink":"/","section":"","summary":"","title":""},{"content":"","date":"19 March 2024","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"19 March 2024","permalink":"/tags/conventionoverconfiguration/","section":"Tags","summary":"","title":"ConventionOverConfiguration"},{"content":"","date":"19 March 2024","permalink":"/categories/file-system/","section":"Categories","summary":"","title":"File System"},{"content":"","date":"19 March 2024","permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux"},{"content":"","date":"19 March 2024","permalink":"/tags/linuxbasics/","section":"Tags","summary":"","title":"LinuxBasics"},{"content":"","date":"19 March 2024","permalink":"/tags/linuxfilesystem/","section":"Tags","summary":"","title":"LinuxFileSystem"},{"content":"","date":"19 March 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Welcome, readers! Today, we embark on a journey into the intricate world of the Linux File System. Have you ever glanced at the array of directories in your Linux system and pondered their purpose? Why not consolidate everything into a single directory?\nThe Linux File System is a finely tuned structure for organizing and managing diverse information. In the Unix ecosystem, every piece of data is meticulously organized within files, which are further arranged into directories. Together, these files and directories form the backbone of the file system.\nBut why is such organization necessary?\nImagine you\u0026rsquo;re immersed in a project, nestled within a directory bustling with activity. Within this directory reside a myriad of essential components:\nBinary files Configuration files Log files Data files Metadata files crucial for execution Libraries Now, envision cramming all these elements into a single directory—it\u0026rsquo;s akin to a cluttered workspace where finding anything becomes a Herculean task. And if another software enters the fray, each with its own set of configuration files, chaos ensues.\nManaging such a disarray is a nightmare. Without a standardized approach, everyone adopts their own filing system, resulting in a cacophony of disparate structures. This lack of uniformity breeds confusion and inefficiency.\nEnter the Unix philosophy: \u0026ldquo;Convention over Configuration.\u0026rdquo;\nBy adhering to this principle, order emerges from the chaos. Similar files are grouped together within designated directories, fostering clarity and consistency. Visualize a harmonious arrangement where each type of file resides in its rightful place, facilitating seamless comprehension of the file system\u0026rsquo;s hierarchy.\nNow, let\u0026rsquo;s delve into the pivotal directories that shape the Linux/Unix file system landscape.\n1. /opt - Optional Software: # The /opt directory is used for installing optional software packages that are not part of the core operating system. This directory provides a standardized location for third-party software to be installed, separate from the system\u0026rsquo;s default directories like /bin, /usr/bin, etc. This helps in maintaining a clean and organized file system layout.\nExample:\nsudo tar -xzf example_package.tar.gz -C /opt Explanation:\nsudo: Executes the command with superuser privileges, as installation often requires elevated permissions. tar -xzf example_package.tar.gz: Extracts the contents of the example_package.tar.gz archive. -C /opt: Specifies the target directory for extracting the contents, which in this case is /opt. 2. /var - Variable Data: # The /var directory contains variable data such as logs, spool files, temporary files, and other files that may change frequently during the operation of the system. It\u0026rsquo;s important for system administrators to monitor this directory as it can grow in size over time due to logging and other activities.\nExample:\ncat /var/log/syslog Explanation:\ncat: Concatenates and displays the contents of files. /var/log/syslog: Path to the syslog file, which contains system log messages. 3. /usr - User Binaries: # The /usr directory is used for storing user-related binaries, libraries, documentation, and source code. It typically contains the majority of user-installed applications and their associated files. The /usr/local subdirectory is often used for software installed manually by the system administrator.\nExample:\n./configure make sudo make install Explanation:\n./configure: Configures the source code for compilation. make: Compiles the source code. sudo make install: Installs the compiled binaries and related files into the system. 4. /tmp - Temporary Files: # The /tmp directory is used for storing temporary files and directories that are needed by various programs during their operation. These files are typically deleted automatically when the system is rebooted.\nExample:\ntemp_file=$(mktemp) echo \u0026#34;This is a temporary file\u0026#34; \u0026gt; $temp_file Explanation:\nmktemp: Creates a temporary file and returns its filename. temp_file=$(mktemp): Assigns the filename of the temporary file to the variable temp_file. echo \u0026quot;This is a temporary file\u0026quot; \u0026gt; $temp_file: Writes a message to the temporary file. 5. /sys - System Information: # The /sys directory is a virtual filesystem that provides an interface to kernel data structures and device information. It contains detailed information about the system\u0026rsquo;s hardware configuration, such as CPU, memory, and devices. This directory is often used by system administrators and diagnostic tools to gather system information.\nExample:\nls /sys/devices/system/cpu Explanation:\nls: Lists the contents of a directory. /sys/devices/system/cpu: Path to the directory containing CPU-related information. 6. /srv - Service Data: # The /srv directory is designated for service-specific data. It is commonly used to store data files associated with network services provided by the system. For example, web server content, FTP files, or version control repositories may be stored in subdirectories under /srv.\nExample:\ncd /srv/http sudo nano index.html Explanation:\ncd /srv/http: Changes the current directory to /srv/http, where HTTP server content is typically stored. sudo nano index.html: Opens the index.html file in the Nano text editor for editing. 7. /sbin - System Binaries: # The /sbin directory contains essential system binaries used for system administration and maintenance tasks. These binaries are typically executable by the root user and are not intended for regular user commands.\nExample:\ndf -h Explanation:\ndf -h: Displays disk usage statistics in human-readable format, showing information about mounted filesystems. 8. /run - Runtime Data: # The /run directory stores temporary runtime data, including system and application-specific information. It is typically used by daemons and services to store transient data that is required during system operation.\nExample:\necho $$ \u0026gt; /run/shm/$USER.pid Explanation:\necho $$: Prints the process ID (PID) of the current shell session. /run/shm/$USER.pid: Path to the file where the PID is stored, using the current user\u0026rsquo;s username as part of the filename. TO BE CONTINUED ...\n","date":"19 March 2024","permalink":"/posts/linux-file-system/","section":"Posts","summary":"I wanted to write this Linux file system guide to clarify the logic behind file organization in Linux, aiming to empower readers to navigate and manage their systems more effectively.","title":"Understanding the Linux File System"},{"content":"","date":"19 March 2024","permalink":"/categories/unix/","section":"Categories","summary":"","title":"Unix"},{"content":"","date":"19 March 2024","permalink":"/tags/unixphilosophy/","section":"Tags","summary":"","title":"UnixPhilosophy"},{"content":"","date":"11 March 2024","permalink":"/tags/data-analysis/","section":"Tags","summary":"","title":"Data Analysis"},{"content":"","date":"11 March 2024","permalink":"/tags/data-science/","section":"Tags","summary":"","title":"Data Science"},{"content":"","date":"11 March 2024","permalink":"/categories/data-science/","section":"Categories","summary":"","title":"Data Science"},{"content":"","date":"11 March 2024","permalink":"/tags/database/","section":"Tags","summary":"","title":"Database"},{"content":"Welcome, aspiring data scientists! In this guide, we\u0026rsquo;ll embark on a journey through the essential SQL concepts that will empower you to wield the powers of data manipulation with finesse. From the foundational SELECT statements to advanced techniques like window functions and performance optimization, we\u0026rsquo;ll cover it all. So, grab your wands (or keyboards) and let\u0026rsquo;s dive in!\n1. SELECT Statements # The SELECT statement is the bread and butter of SQL, allowing us to retrieve data from the database. Let\u0026rsquo;s start with a simple SELECT query:\nSELECT * FROM customers; This query fetches all records from the customers table. Here\u0026rsquo;s a sample output:\nid name email phone 1 Alice alice@example.com 123-456-789 2 Bob bob@example.com 987-654-321 3 Charlie charlie@example.com 555-555-555 But what if we only want specific columns?\nSELECT name, email FROM customers; name email Alice alice@example.com Bob bob@example.com Charlie charlie@example.com 2. Joins # Combining data from multiple tables is a common task in SQL. Let\u0026rsquo;s learn about different types of joins with an example using customers and orders tables:\nINNER JOIN # The INNER JOIN combines rows from two tables where there is a match on the joining condition.\nSELECT customers.name, orders.order_id, orders.amount FROM customers INNER JOIN orders ON customers.id = orders.customer_id; Sample output:\nname order_id amount Alice 1 100 Bob 2 150 Bob 3 200 Charlie 4 80 LEFT JOIN # The LEFT JOIN returns all rows from the left table (customers), along with matching rows from the right table (orders). If there is no match, NULL values are returned for the columns from the right table.\nSELECT customers.name, orders.order_id, orders.amount FROM customers LEFT JOIN orders ON customers.id = orders.customer_id; Sample output:\nname order_id amount Alice 1 100 Bob 2 150 Bob 3 200 Charlie 4 80 David NULL NULL RIGHT JOIN # The RIGHT JOIN returns all rows from the right table (orders), along with matching rows from the left table (customers). If there is no match, NULL values are returned for the columns from the left table.\nSELECT customers.name, orders.order_id, orders.amount FROM customers RIGHT JOIN orders ON customers.id = orders.customer_id; Sample output:\nname order_id amount Alice 1 100 Bob 2 150 Bob 3 200 Charlie 4 80 NULL 5 120 3. GROUP BY and Aggregation Functions # GROUP BY allows us to aggregate data and calculate summary statistics. Here\u0026rsquo;s how we can use it with a products table:\nSELECT category, COUNT(*) AS num_products FROM products GROUP BY category; Sample output:\ncategory num_products Electronics 5 Clothing 7 Books 4 4. Subqueries # Subqueries allow us to nest queries within queries. Let\u0026rsquo;s see an example using the orders table:\nSELECT customer_id, amount FROM orders WHERE customer_id IN ( SELECT id FROM customers WHERE name = \u0026#39;Alice\u0026#39; ); Sample output:\ncustomer_id amount 1 100 5. Common Table Expressions (CTEs) # CTEs provide a way to simplify complex queries and improve readability. Here\u0026rsquo;s how to use them with a students table:\nWITH top_students AS ( SELECT name, total_marks FROM students WHERE total_marks \u0026gt;= 90 ) SELECT * FROM top_students; Sample output:\nname total_marks Alice 95 Bob 92 6. Window Functions # Window functions allow us to perform calculations across a set of rows. Let\u0026rsquo;s look at an example using the employees table:\nSELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS rank FROM employees; Sample output:\nname salary rank Alice 70000 1 Bob 60000 2 Charlie 55000 3 7. Indexing # Indexes are crucial for optimizing query performance. Here\u0026rsquo;s how to create an index on the email column in the customers table:\nCREATE INDEX idx_email ON customers (email); ","date":"11 March 2024","permalink":"/posts/mastering-sql/","section":"Posts","summary":"Welcome, fellow data aficionados! Prepare to embark on a thrilling expedition through the realm of SQL mastery. In this enlightening blog post, I\u0026rsquo;ll unveil the fascinating journey I\u0026rsquo;ve undertaken as a data scientist, delving deep into the intricacies of SQL. Join me as I navigate the winding pathways of SELECT statements, the enchanting world of JOINs, and the powerful magic of GROUP BY and aggregation functions. From the humble beginnings of data querying to the mastery of advanced techniques like window functions and performance optimization, I\u0026rsquo;ll guide you through each step of the way. Get ready to unlock the secrets of SQL and empower your data analysis endeavors like never before!","title":"Mastering SQL for Data Scientists: A Comprehensive Guide"},{"content":"","date":"11 March 2024","permalink":"/tags/sql/","section":"Tags","summary":"","title":"SQL"},{"content":"","date":"11 March 2024","permalink":"/categories/sql/","section":"Categories","summary":"","title":"SQL"},{"content":"Hey there! 👋 I\u0026rsquo;m El Khalidi, a seasoned data scientist with a burning passion for programming. With a robust background in mathematics and statistics, backed by a BSc in Economics and an MSc in Actuarial Science, I\u0026rsquo;ve spent years delving into the intricacies of data analysis and predictive modeling.\nIn my journey as a data scientist, I\u0026rsquo;ve honed my skills across a spectrum of tools and technologies. From wielding Excel and SQL with precision to harnessing the power of Python 🐍, R, Tableau, and PowerBi 📊, I\u0026rsquo;ve navigated complex datasets and extracted actionable insights to drive business growth 📈 and innovation.\nBut my fascination with technology extends beyond the realm of data science. I find joy in the art of programming itself, with a particular interest in C++. Whether it\u0026rsquo;s exploring game 🎮 mechanics or diving into software development, I\u0026rsquo;m constantly seeking new challenges to expand my programming prowess.\nThrough my work in data science and programming, I\u0026rsquo;ve come to appreciate the creative potential of technology. Whether it\u0026rsquo;s building predictive algorithms or crafting elegant code 🧑‍💻, I\u0026rsquo;m driven by a desire to push the boundaries of what\u0026rsquo;s possible and bring innovative solutions to life.\nIn the spirit of collaboration and continuous learning, I\u0026rsquo;m always eager to connect with like-minded individuals who share my passion for data science and programming. Whether you\u0026rsquo;re a fellow enthusiast looking to exchange ideas or someone eager to explore the exciting possibilities of technology, feel free to reach out!\nWhether it\u0026rsquo;s via email or LinkedIn, I\u0026rsquo;m here to connect, collaborate, and embark on new adventures in the ever-evolving world of data science and programming.\n","date":"12 January 2024","permalink":"/about/","section":"","summary":"Hey there! 👋 I\u0026rsquo;m El Khalidi, a seasoned data scientist with a burning passion for programming. With a robust background in mathematics and statistics, backed by a BSc in Economics and an MSc in Actuarial Science, I\u0026rsquo;ve spent years delving into the intricacies of data analysis and predictive modeling.","title":"About"},{"content":"","date":"27 November 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"I try to stay busy learning new skills and the best way to do that is to make something. These are my projects that I am working on or have finished. The goal would be to have this list filled with projects that could help others learn the same skills!\nLogo Title Description Link Snake An attempt to make the snake game using pygame. repo Customer Segmentation Exploring customer segmentation through the application of both k-means clustering and DBSCAN techniques. repo A/B testing A step-by-step guide of how to design and analyse an A/B test experiment in Python. repo ","date":"27 November 2023","permalink":"/projects/","section":"","summary":"I try to stay busy learning new skills and the best way to do that is to make something. These are my projects that I am working on or have finished.","title":"Projects"},{"content":"Experience Company Role Dates Summary Amazon Business Insights Analyst Feb 2020 - Feb 2024 Saved £850k annually by restructuring shift schedules for IT teams based on analysis results. Reduced operational expenditure by 27% through targeted spending analysis. Decreased average ticket resolution time by 22%, enhancing customer satisfaction. TME Product Analyst Feb 2018 - Jan 2020 Boosted user interaction by 14% through A/B testing and statistical analysis of new product features. Increased conversion rates by 11% by tailoring marketing strategies based on user segmentation. Optimized pricing strategies, resulting in a 10% revenue increase. Atlanta Insurances Data Analyst Aug 2014 - Jun 2016 Enhanced customer engagement by 25% through data-driven marketing campaign optimization. Achieved a 15% reduction in acquisition costs through efficient allocation of resources. Improved policy adoption and satisfaction by 20% with personalized marketing approaches. Banque Populaire Credit Analyst Mar 2013 - Jul 2014 Assessed creditworthiness of potential borrowers by analyzing financial data from diverse sources. Provided senior management with credit recommendations based on thorough due diligence. Education School Link Degree Date Aston University HNC Mathematics 2020 - 2021 University Hassan II Casablanca, Morocco Msc Actuarial Science 2020 - 2021 University Hassan II Casablanca, Morocco Bsc Economics 2020 - 2021 ","date":"27 November 2023","permalink":"/resume/","section":"","summary":"Experience Company Role Dates Summary Amazon Business Insights Analyst Feb 2020 - Feb 2024 Saved £850k annually by restructuring shift schedules for IT teams based on analysis results. Reduced operational expenditure by 27% through targeted spending analysis.","title":"Resume"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]